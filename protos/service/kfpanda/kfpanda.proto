syntax = "proto3";
package kfpanda;

option cc_generic_services = true;
option go_package = "github.com/sunzhenkai/kung-fu-panda-protocols/go/service/kfpanda;kfpanda";

enum RecordType {
  RECORD_TYPE_UNSPECIFIED = 0;
  RECORD_TYPE_HTTP = 1;
  RECORD_TYPE_GRPC = 2;
}

message URI {
  string full = 1;
  string schema = 100;
  string host = 101;
  int32 port = 102;
  string path = 103;
  string query = 104;
}

message RecordRequest {
  string request_id = 1;
  // reqeust timestamp in millisecond
  // default: current timestamp if not set
  int64 timestamp_ms = 2;
  URI uri = 3;

  string service = 100;
  RecordType type = 101;
  bytes data = 102;
}

message RecordResponse {
  // code: indicte the processing result
  // 0: ok, failed otherwise
  int32 code = 1;
  string message = 2;
}

message ReplayRequest {
  message Option {
    int32 count = 1;
    int32 timeout_ms = 2;
  }

  string request_id = 1;
  string service = 2;
  Option option = 3;
  URI target = 100;
}

message ServiceResponse {
  bytes body = 1;
  string message = 2;
  RecordType type = 3;
  string type_str = 4;
}

message ReplayResponse {
  int32 code = 1;
  string message = 2;

  int32 success_count = 100;
  int32 failed_count = 101;
  repeated ServiceResponse responses = 102;
}

message ReplayRequestV2 {
  message Option {
    int32 count = 1;
    int32 timeout_ms = 2;
  }

  string request_id = 1;
  string service = 2;
  Option option = 3;
  URI target_base = 100;
  URI target_compare = 101;
}

message ReplayResponseV2 {

  message ServiceResponseComparable {
    ServiceResponse base = 1;
    ServiceResponse compare = 2;
  }

  int32 code = 1;
  string message = 2;

  int32 success_count = 100;
  int32 failed_count = 101;
  repeated ServiceResponseComparable responses = 102;
}

message SampleRequest {
  string service = 1;
  int32 count = 2;
}

message SampleResponse {
  bool success = 1;
  int32 code = 2;
  string message = 3;
  repeated bytes data = 4;
}

message LogResponse {
  int32 code = 1;
  string message = 2;
}

enum LogLevel {
  LOG_LEVEL_UNSPECIFIED = 0;
  LOG_LEVEL_INFO = 1;
  LOG_LEVEL_WARN = 2;
  LOG_LEVEL_ERROR = 3;
  LOG_LEVEL_FATAL = 4;
  LOG_LEVEL_DEBUG = 5;
}

message LogRequest {
  string request_id = 1;
  int64 timestamp_ms = 2;
  string service = 3;
  string log_name = 4;
  LogLevel log_level = 5;
  string message = 6;

  string file = 50;
  int32 line = 51;
  string function = 52;

  string host = 100;
  string environment = 101;
  string region = 102;
  string cluster = 103;
  string version = 104;

  map<string, string> metadata = 200;
  string extra = 201;
}

service KfPandaService {
  rpc Record(RecordRequest) returns (RecordResponse) {}
  rpc Replay(ReplayRequest) returns (ReplayResponse) {}
  rpc ReplayV2(ReplayRequestV2) returns (ReplayResponseV2) {}
  rpc Sample(SampleRequest) returns (SampleResponse) {}
  rpc Log(LogRequest) returns (LogResponse) {}
}

message HttpRequest {}
message HttpResponse {}
message EchoMessage {
  string message = 1;
}

service KfPandaDebugService {
  rpc Echo(EchoMessage) returns (EchoMessage) {}
  rpc Replay(HttpRequest) returns (HttpResponse) {}
}

service KfPandaApiService {
  rpc Api(HttpRequest) returns (HttpResponse) {}
}
