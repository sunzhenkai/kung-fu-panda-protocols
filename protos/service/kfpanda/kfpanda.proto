syntax = "proto3";
package kfpanda;

option cc_generic_services = true;
option go_package = "github.com/sunzhenkai/kung-fu-panda-protocols/go/service/kfpanda;kfpanda";

enum RecordType {
  RECORD_TYPE_UNSPECIFIED = 0;
  RECORD_TYPE_HTTP = 1;
  RECORD_TYPE_GRPC = 2;
}

message RecordRequest {
  string request_id = 1;
  // reqeust timestamp in millisecond
  // default: current timestamp if not set
  int64 timestamp_ms = 2;

  string service = 100;
  RecordType type = 101;
  bytes data = 102;
}

message RecordResponse {
  // code: indicte the processing result
  // 0: ok, failed otherwise
  int32 code = 1;
  string message = 2;
}

message ReplayRequest {
  message Target {
    string ip = 1;
    int32 port = 2;
  }

  message Option {
    int32 count = 1;
    int32 timeout_ms = 2;
  }

  string request_id = 1;
  string service = 2;
  Option option = 3;
  Target target = 100;
}

message ReplayResponse {
  message ServiceResponse {
    bytes body = 1;
    string message = 2;
  }

  int32 code = 1;
  string message = 2;

  int32 success_count = 100;
  int32 failed_count = 101;
  repeated ServiceResponse responses = 102;
}

service KfPandaService {
  rpc Record(RecordRequest) returns (RecordResponse) {}
  rpc Replay(ReplayRequest) returns (ReplayResponse) {}
}

message HttpRequest {}
message HttpResponse {}

service HttpKfPandaService {
  rpc Echo(HttpRequest) returns (HttpResponse) {}
  rpc Replay(HttpRequest) returns (HttpResponse) {}
}
